From: Federico Pellegrin <fede@evolware.org>
Date: Tue Feb 15 02:36:36 PM CET 2022
Subject: [PATCH] Fix build with Lua 5.4 and GCC >= 10.2

diff --git a/libs/sol/single/sol/sol.hpp b/libs/sol/single/sol/sol.hpp
index 049a4c1f..2bd2f002 100644
--- a/libs/sol/single/sol/sol.hpp
+++ b/libs/sol/single/sol/sol.hpp
@@ -1103,6 +1103,10 @@ inline int lua_isinteger(lua_State* L, int idx) {
 #ifndef SOL_5_1_0_H
 #define SOL_5_1_0_H
 
+#if SOL_LUA_VERSION == 504
+#define LUA_ERRGCMM (LUA_ERRERR + 2)
+#endif
+
 #if SOL_LUA_VERSION == 501
 /* Lua 5.1 */
 
@@ -7121,7 +7125,9 @@ namespace sol {
 			}
 
 			static int push(lua_State* L, const wchar_t(&str)[N], std::size_t sz) {
-				return stack::push<const wchar_t*>(L, str, str + sz);
+				//return stack::push<const wchar_t*>(L, str, str + sz);
+				const wchar_t* str_ptr = static_cast<const wchar_t*>(str);
+				return stack::push<const wchar_t*>(L, str_ptr, str_ptr + sz);
 			}
 		};
 
@@ -7132,7 +7138,9 @@ namespace sol {
 			}
 
 			static int push(lua_State* L, const char16_t(&str)[N], std::size_t sz) {
-				return stack::push<const char16_t*>(L, str, str + sz);
+				//return stack::push<const char16_t*>(L, str, str + sz);
+				const char16_t* str_ptr = static_cast<const char16_t*>(str);
+				return stack::push<const char16_t*>(L, str_ptr, str_ptr + sz);
 			}
 		};
 
@@ -7143,7 +7151,9 @@ namespace sol {
 			}
 
 			static int push(lua_State* L, const char32_t(&str)[N], std::size_t sz) {
-				return stack::push<const char32_t*>(L, str, str + sz);
+				//return stack::push<const char32_t*>(L, str, str + sz);
+				const char32_t* str_ptr = static_cast<const char32_t*>(str);
+				return stack::push<const char32_t*>(L, str_ptr, str_ptr + sz);
 			}
 		};
 
@@ -14752,8 +14762,11 @@ namespace sol {
 		void luacall(std::ptrdiff_t argcount, std::ptrdiff_t) {
 #if SOL_LUA_VERSION < 502
 			stats = static_cast<call_status>(lua_resume(lua_state(), static_cast<int>(argcount)));
-#else
+#elif SOL_LUA_VERSION < 504
 			stats = static_cast<call_status>(lua_resume(lua_state(), nullptr, static_cast<int>(argcount)));
+#else
+			int nreturned = 0;
+			stats = static_cast<call_status>(lua_resume(lua_state(), nullptr, static_cast<int>(argcount), &nreturned));
 #endif // Lua 5.1 compat
 		}
 
diff --git a/src/cpp/lua-helpers.cpp b/src/cpp/lua-helpers.cpp
index f1fc19a..3d1d3f1 100644
--- a/src/cpp/lua-helpers.cpp
+++ b/src/cpp/lua-helpers.cpp
@@ -32,7 +32,7 @@ std::string dumpFunction(const sol::function& f) {
     sol::state_view lua(f.lua_state());
     sol::stack::push(lua, f);
     std::string result;
-#if LUA_VERSION_NUM == 503
+#if LUA_VERSION_NUM >= 503
     int ret = lua_dump(lua, dumpMemoryWriter, &result, 0 /* not strip debug info*/);
 #else
     int ret = lua_dump(lua, dumpMemoryWriter, &result);
diff --git a/src/cpp/stored-object.cpp b/src/cpp/stored-object.cpp
index a44c220..4d156b9 100644
--- a/src/cpp/stored-object.cpp
+++ b/src/cpp/stored-object.cpp
@@ -155,7 +155,7 @@ StoredObject fromSolObject(const SolObject& luaObject, SolTableToShared& visited
             return std::make_unique<PrimitiveHolder<bool>>(luaObject);
         case sol::type::number:
         {
-#if LUA_VERSION_NUM == 503
+#if LUA_VERSION_NUM >= 503
             sol::stack::push(luaObject.lua_state(), luaObject);
             int isInterger = lua_isinteger(luaObject.lua_state(), -1);
             sol::stack::pop<sol::object>(luaObject.lua_state());
diff --git a/src/cpp/utils.h b/src/cpp/utils.h
index 116cec1..a7d8bdc 100644
--- a/src/cpp/utils.h
+++ b/src/cpp/utils.h
@@ -5,11 +5,11 @@
 #include <sstream>
 #include <sol.hpp>
 
-#if LUA_VERSION_NUM < 501 || LUA_VERSION_NUM > 503
+#if LUA_VERSION_NUM < 501 || LUA_VERSION_NUM > 504
 #   error Unsupported Lua version
 #endif
 
-#if LUA_VERSION_NUM == 503
+#if LUA_VERSION_NUM >= 503
 #   define LUA_INDEX_TYPE lua_Integer
 #else
 #   define LUA_INDEX_TYPE lua_Number
